apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: ai-template
  title: AI Template
  description: Create a production ready AI app
  tags:
    - rhoai
spec:
  owner: user:user1
  system: janus-idp
  type: service
  parameters:
    - title: Provide Information About The AI Component
      required:
       - projectId
       - projectDescription
      properties:
          projectId:
            title: Project Name
            type: string
            description: Unique name for the AI Project
            default: ai-app
          projectDescription:
            title: Project Description
            type: string
            description: Description of the AI Project
    - title: Provide Cluster And Image Registry Information
      required:
        - host
        - image_registry
      properties:
        host:
          title: Cluster Host Root
          type: string
          description: Your base wildcard host route
          default: ".apps.cluster.com"
        image_registry:
          title: Image Registry
          type: string
          enum:
            - Openshift
      dependencies:
        image_registry:
          oneOf:
            - properties:
                image_registry:
                  enum:
                    - Openshift
                image_host:
                  title: Image Host
                  type: string
                  description: Host for storing image
                  default: image-registry.openshift-image-registry.svc:5000
                image_tag:
                  title: Image Tag
                  default: latest
                  type: string
                  description: Build Image tag
    - title: Application repository Information
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: ""
            owner:
              title: Repo Owner
              type: string
              description: Your SCM host organization/group
              default: development
              enum:
                - development
            verify_commits:
              title: Verify Commits
              type: string
              description: Verify Git repository commits using Red Hatâ€™s Trusted Artifact
                Signer (TAS) service
              default: disabled
              enum:
                - enabled
                - disabled
  steps:
    - id: sourceCodeTemplate
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        cookiecutterCompat: true
        values:
          cluster: ${{ parameters.host }}
          project_description: ${{ parameters.projectDescription }}
          project_name: ${{ parameters.projectId }}
          projectId: ${{ parameters.projectId }}
          orgName: ${{ parameters.projectId }}
          repoName: ${{ parameters.projectId }}
          component_id: ${{ parameters.projectId }}
          namespace: ${{ parameters.projectId }}
          owner: ${{ user.entity.metadata.name }}
          host: ${{ parameters.repo.host }}
          destination: ${{ parameters.repo.owner }}/${{ parameters.projectId }}
          port: 8080
          verify_commits: ${{ parameters.repo.verify_commits }}
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: ${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{ parameters.projectId }}
        repoVisibility: public
        defaultBranch: main

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ./manifests
        values:
          component_id: ${{ parameters.projectId }}
          description: ${{ parameters.projectDescription }}
          project_description: ${{ parameters.projectDescription }}
          project_name: ${{ parameters.projectId }}
          destination: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.projectId }}-gitops.git
          source_repository: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.projectId }}.git
          repository_name: ${{ parameters.projectId }}
          git_owner: ${{ parameters.repo.owner }}
          cluster: ${{ parameters.host }}
          namespace: ${{ parameters.projectId }}
          image_registry: ${{ parameters.image_registry }}
          image_host: ${{ parameters.image_host }}
          image_organization: ${{ parameters.image_organization }}
          image_name: ${{ parameters.projectId }}
          image_tag: ${{ parameters.image_tag }}
          port: 8080
          repository_host: ${{ parameters.repo.host }}
          deployment_name: ai-template
          user: ${{ user.entity.metadata.name }}
          verify_commits: ${{ parameters.repo.verify_commits }}
        targetPath: ./tenant-gitops
    - id: publish-gitops
      name: Publishing to Resource Repository
      action: publish:gitlab
      input:
        repoUrl: ${{ parameters.repo.host }}?owner=${{ parameters.repo.owner }}&repo=${{ parameters.projectId }}-gitops
        title: gitops resources for ${{ parameters.projectId }}
        description: gitops resources for ${{ parameters.projectId }}
        sourcePath: ./tenant-gitops
        repoVisibility: public
        defaultBranch: main
    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.projectId }}-bootstrap
        argoInstance: main
        namespace: janus-argocd
        repoUrl: https://${{ parameters.repo.host }}/${{ parameters.repo.owner }}/${{ parameters.projectId }}-gitops.git
        path: argocd/
  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
